@page "/"
@using MudBlazor
@inject ITarefaServices TarefaServices
@inject IDialogService DialogService

<MudTable T="TarefaViewModel" Items="@tarefas" Dense="true" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info" OnRowClick="TarefaDetalhes">
    <HeaderContent>
        <MudTh>Número da Tarefa</MudTh>
        <MudTh>Cliente</MudTh>
        <MudTh>Data de Abertura</MudTh>
        <MudTh>Status da Atividade</MudTh>
    </HeaderContent>

    <RowTemplate Context="tarefa">
        <MudTd DataLabel="Nr">@tarefa.NumeroAtividade</MudTd>
        <MudTd DataLabel="Cliente">@tarefa.Cliente</MudTd>
        <MudTd DataLabel="Data da abertura">@tarefa.Inicio.ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="Status">
            <MudChip T="string" Color="GetStatusColor(aberto)">Aberto</MudChip>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText class="text-center" Color="Color.Secondary">
            Nenhuma tarefa encontrada.
        </MudText>
    </NoRecordsContent>
</MudTable>

@code {
    private IEnumerable<TarefaViewModel>? tarefas;
    private bool _loading = true;
    private string aberto = "Aberto";

    private TarefaViewModel? tarefaSelecionada;
    private bool modalAberto = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            tarefas = await TarefaServices.ObterTodasTarefasAsync();

            if (tarefas == null)
            {
                tarefas = new List<TarefaViewModel>();
                _loading = false;
            }

            _loading = false;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao carregar tarefas: {ex.Message}");
        }
    }

    private async Task TarefaDetalhes(TableRowClickEventArgs<TarefaViewModel> args)
    {
        var tarefa = args.Item; // Aqui, você pega a tarefa clicada

        var parameters = new DialogParameters
        {
            { "tarefaSelecionada", tarefa }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = DialogService.Show<TarefaDetalhesDialog>("Detalhes da Tarefa", parameters, options);
        await dialog.Result;
    }

    private Color GetStatusColor(string? status)
    {
        return status switch
        {
            "Aberto" => Color.Primary,
            "Em Andamento" => Color.Warning,
            "Concluído" => Color.Success,
            _ => Color.Default
        };
    }
}

