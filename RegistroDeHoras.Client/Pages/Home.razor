@page "/"
@using MudBlazor
@inject ITarefasServices TarefaServices
@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<MudTable T="TarefaViewModel" Items="@tarefas" Dense="true" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading"
LoadingProgressColor="Color.Info" OnRowClick="TarefaDetalhes" Filter="new Func<TarefaViewModel, bool>(FilterFunc1)">
    <ToolBarContent>
        <MudText Typo="Typo.h2">Tarefas</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start"
        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Número da Tarefa</MudTh>
        <MudTh>Cliente</MudTh>
        <MudTh>Data de Abertura</MudTh>
        <MudTh>Status da Atividade</MudTh>
        <MudTh>Ações</MudTh>
    </HeaderContent>

    <RowTemplate Context="tarefa">
        <MudTd DataLabel="Nr">@tarefa.NumeroDaAtividade</MudTd>
        <MudTd DataLabel="Cliente">@tarefa.Cliente</MudTd>
        <MudTd DataLabel="Data da abertura">@tarefa.Inicio.ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="Status">
            <MudChip T="string" Color="GetStatusColor(tarefa.StatusDaTarefa)">@tarefa.StatusDaTarefa</MudChip>
        </MudTd>
        <MudTd DataLabel="Acoes">
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" />
            @* <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" OnClick="() => ExcluirTarefa(tarefa.NumeroDaAtividade)" /> *@
            <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" OnClick="() => TestarNumeroDaTarefa(tarefa.NumeroDaAtividade)" />

        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <NoRecordsContent>
        <MudText class="text-center" Color="Color.Secondary">
            Nenhuma tarefa encontrada.
        </MudText>
    </NoRecordsContent>
</MudTable>

<div style="position: fixed; bottom: 16px; right: 16px;">
    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@(() => Navigation.NavigateTo("/registro"))" />
</div>

@code {
    private IEnumerable<TarefaViewModel>? tarefas;
    private bool _loading = true;
    private string aberto = "Aberto";
    private string searchString1 = "";

    private TarefaViewModel? tarefaSelecionada;
    private bool modalAberto = false;

    private IEnumerable<TarefaViewModel> listaDeTarefas = new List<TarefaViewModel>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            tarefas = await TarefaServices.ObterTodasTarefasAsync();

            var uri = new Uri(Navigation.Uri);
            var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
            var novaTarefa = queryParams["tarefa"];

            if (!string.IsNullOrEmpty(novaTarefa))
            {
                Snackbar.Add($"Tarefa {novaTarefa} criada com sucesso!", Severity.Success);
                await AtualizarListaDeTarefas();
                Navigation.NavigateTo(Navigation.BaseUri, forceLoad: false);
            }

            _loading = false;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao carregar tarefas: {ex.Message}");
        }
    }

    private async Task TarefaDetalhes(TableRowClickEventArgs<TarefaViewModel> args)
    {
        var tarefa = args.Item;

        var parameters = new DialogParameters
        {
            { "tarefaSelecionada", tarefa },
            { "OnTarefaAtualizada", EventCallback.Factory.Create<TarefaViewModel>(this, AtualizarListaDeTarefas) }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };

        var dialog = DialogService.Show<TarefaDetalhesDialog>("Detalhes da Tarefa", parameters, options);
        await dialog.Result;
    }

    private void AtualizarListaDeTarefas(TarefaViewModel tarefaAtualizada)
    {
        if (tarefas != null)
        {
            var tarefaIndex = tarefas.ToList().FindIndex(t => t.NumeroDaAtividade == tarefaAtualizada.NumeroDaAtividade);
            if (tarefaIndex != -1)
            {
                var listaTemporaria = tarefas.ToList();
                listaTemporaria[tarefaIndex] = tarefaAtualizada;
                tarefas = listaTemporaria;
                StateHasChanged();
            }
        }
    }

    private Color GetStatusColor(string? status)
    {
        return status switch
        {
            "Aberto" => Color.Primary,
            "Parada" => Color.Warning,
            "Em andamento" => Color.Primary,
            "Finalizada" => Color.Success,
            _ => Color.Default
        };
    }

    private bool FilterFunc1(TarefaViewModel tarefa) => FilterFunc(tarefa, searchString1);

    private bool FilterFunc(TarefaViewModel tarefa, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (tarefa.Cliente.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (tarefa.Titulo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (tarefa.NumeroDaAtividade.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task AtualizarListaDeTarefas()
    {
        tarefas = await TarefaServices.ObterTodasTarefasAsync();
        StateHasChanged();
    }

    private async Task ExcluirTarefa(string numeroDaTarefa)
    {
        if (string.IsNullOrWhiteSpace(numeroDaTarefa))
        {
            Snackbar.Add("Número da tarefa inválido.", Severity.Warning);
            return;
        }

        var confirmacao = await DialogService.ShowMessageBox(
            "Confirmação",
            "Tem certeza de que deseja excluir esta tarefa?",
            yesText: "Sim",
            noText: "Cancelar");

        if (confirmacao != true)
            return;

        try
        {
            bool sucesso = await TarefaServices.DeletarTarefaAsync(numeroDaTarefa);

            if (sucesso)
            {
                Snackbar.Add("Tarefa excluída com sucesso!", Severity.Success);
                await AtualizarListaDeTarefas();
            }
            else
            {
                Snackbar.Add("Falha ao excluir a tarefa. Tente novamente.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erro ao excluir tarefa {numeroDaTarefa}: {ex.Message}");
            Snackbar.Add("Ocorreu um erro ao excluir a tarefa.", Severity.Error);
        }
    }

    private void TestarNumeroDaTarefa(string numero)
    {
        Console.WriteLine($"Número da tarefa: {numero}");
    }


}

