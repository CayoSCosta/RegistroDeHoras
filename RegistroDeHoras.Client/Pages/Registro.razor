@page "/registro"
@inject ITarefaServices TarefaServices;

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudCard Elevation="4" Class="p-4">
        <MudText Typo="Typo.h5" Class="mb-4">Nova Tarefa</MudText>
        <EditForm Model="@tarefa" OnValidSubmit="Enviartarefa">
            <MudGrid Spacing="2">
                <!-- Campo Número da tarefa -->
                <MudItem xs="12" md="12">
                    <MudTextField Label="Número da tarefa" Variant="Variant.Outlined"
                    @bind-Value="tarefa.NumeroAtividade" Required="true"
                    ErrorText="@ValidationMessage(nameof(tarefa.NumeroAtividade))" />
                </MudItem>

                <!-- Campo Cliente -->
                <MudItem xs="12" md="12">
                    <MudTextField Label="Cliente" Variant="Variant.Outlined" @bind-Value="tarefa.Cliente"
                    Required="true" ErrorText="@ValidationMessage(nameof(tarefa.Cliente))" />
                </MudItem>

                <!-- Campo Título -->
                <MudItem xs="12">
                    <MudTextField Label="Título" Variant="Variant.Outlined" @bind-Value="tarefa.Titulo"
                    Required="true" ErrorText="@ValidationMessage(nameof(tarefa.Titulo))" />
                </MudItem>

                <!-- Campo Descrição -->
                <MudItem xs="12">
                    <MudTextField Label="Descrição do Problema" Variant="Variant.Outlined" Lines="5"
                    @bind-Value="tarefa.Descricao" Required="true"
                    ErrorText="@ValidationMessage(nameof(tarefa.Descricao))" />
                </MudItem>

                <!-- Botões -->
                <MudItem xs="12" Class="d-flex justify-end mt-4">
                    <MudButton Variant="Variant.Filled" Color="Color.Success" Type="Submit">
                        Iniciar tarefa
                    </MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudCard>
</MudContainer>

@code {
    private TarefaViewModel tarefa = new();

    private async Task Enviartarefa()
    {
        Console.WriteLine("Passou no enviar tarefa");
        try
        {
            if (!string.IsNullOrEmpty(tarefa.NumeroAtividade) && !string.IsNullOrEmpty(tarefa.Cliente) && 
                                    !string.IsNullOrEmpty(tarefa.Titulo) && !string.IsNullOrEmpty(tarefa.Descricao))
            {
                await TarefaServices.CriarTarefaAsync(tarefa.NumeroAtividade, tarefa.Cliente, tarefa.Titulo, tarefa.Descricao);
                Console.WriteLine("tarefa iniciada com sucesso!");
            }
            else
            {
                Console.WriteLine("Erro: Todos os campos são obrigatórios.");
            }
            Console.WriteLine("tarefa iniciada com sucesso!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao enviar: {ex.Message}");
        }
    }

    private string? ValidationMessage(string propertyName)
    {
        var validationContext = new ValidationContext(tarefa) { MemberName = propertyName };
        var results = new List<ValidationResult>();
        Validator.TryValidateProperty(
        tarefa.GetType().GetProperty(propertyName)?.GetValue(tarefa), validationContext, results);
        return results.FirstOrDefault()?.ErrorMessage;
    }
}